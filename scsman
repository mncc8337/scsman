#!/bin/env python

import sys
import os
from os import path
import json
import random

def quit(reason):
    print(reason)
    exit(1)

# default config dir
config_dir = os.path.expanduser("~/.config/scsman")
templates = path.join(config_dir, "templates")
colorschemes = path.join(config_dir, "colorschemes")
link_file = path.join(config_dir, "link.json")

if not os.path.exists(config_dir):
    os.mkdir(config_dir)
    print("created config dir")

if not os.path.exists(templates):
    os.mkdir(templates)
    print("created templates dir")

if not os.path.exists(colorschemes):
    os.mkdir(colorschemes)
    print("created colorschemes dir")

if not os.path.exists(link_file):
    with open(link_file, 'w') as f:
        f.write("{}");
    print("created link file")

if len(sys.argv) == 1:
    exit(0)

link = {}
with open(link_file, 'r') as f:
    link = json.load(f)

def unique_randomword():
    alphabet = "qwertyuiopasdfghjklzxcvbnm1234567890"
    ans = ''
    ans += random.choice(alphabet)
    ans += random.choice(alphabet)
    ans += random.choice(alphabet)
    while ans in link.keys():
        ans += random.choice(alphabet)
    return ans

def update_link_json():
    with open(link_file, 'w') as f:
        json.dump(link, f, indent = 4)

def parse(colorscheme, template):
    if not path.isfile(path.join(colorschemes, f"{colorscheme}.json")):
        quit(f"no such colorscheme: {colorscheme}")

    if template not in link.keys():
        quit(f"no such template: {template}")

    ext = path.splitext(link[template])[1]
    template_ext = template + ext

    # load text in template file
    text = None
    with open(path.join(templates, template_ext), 'r') as f:
        text = f.read()

    # load colorscheme
    color = None
    with open(path.join(colorschemes, f"{colorscheme}.json"), 'r') as f:
        color = json.load(f)

    # replace all {key} in template file
    for key in color:
        query = '{' + key + '}'
        text = text.replace(query, color[key])

    # write parsed text to target file
    with open(os.path.expanduser(link[template]), 'w') as f:
        f.write(text)

    print(f"parsed {template}")

def parse_all(colorscheme):
    if len(link.keys()) == 0:
        quit("no managed file")

    for template in link.keys():
        parse(colorscheme, template)

def add_file(file, name):
    global link

    file = path.abspath(file)

    if not path.isfile(file):
        quit(f"no such file: {file}")

    ext = path.splitext(file)[1]
    if ext: ext = '.' + ext

    if not name:
        print("<name> not provided, using random name ...")
        name = unique_randomword()
    else:
        if name in link.keys():
            quit("similar template name has been added. please try another")

    # link it
    link[name] = file
    update_link_json()

    # create template file
    with open(file, 'r') as f:
        with open(path.join(templates, name + ext), 'w') as t:
            t.write(f.read())

    print(f"added {file} as {name}")
    print("remember to replace any color value e.g #deadbe to {key} in", path.join(templates, name + ext))

def remove_template(arg):
    if arg in link.keys():
        # if provided template name then just remove
        print(f"found {arg} in templates list, removing ...")
        link.pop(arg)
        os.remove(path.join(templates, arg))
    else:
        print(f"{arg} not found in templates list, trying searching for template associated with it ...")

        # find template name that linked to provided file path
        found = False
        temp = None
        for key in link.keys():
            if os.path.expanduser(arg) == os.path.expanduser(link[key]):
                found = True
                temp = key
                break

        if found:
            print(f"found template associated with {arg}, removing ...")
            link.pop(temp)
            os.remove(path.join(templates, temp))
        else:
            # user provided glibberish
            quit(f"cannot find template associated with {arg}")

    update_link_json()

def list_template():
    if len(link.keys()) == 0:
        quit("no template")

    for template in link.keys():
        print("template:", template)
        print("file:    ", link[template])
        print()

def list_colorscheme():
    # list all files in ./colorschemes/
    listd = os.listdir(colorschemes)
    if len(listd) == 0:
        quit("no colorscheme")

    for d in listd:
        # no extension
        print(path.splitext(d)[0])

def print_help():
        print("""Suck/Simple/Stupid/Shitty ColorScheme MANager (scsman)
usage: scsman <option> <args>
option:
    help                             print this text.
    add <file> <name>                add <file> to the manager.
                                     will create a template named <name> at ./templates.
                                     omit <name> to use path as name instead.
    remove <name>                    if provided template name then remove the template.
                                     if provided file path then the template associated with that file will be remove.
                                     the manager will not manage the file associated with that template anymore.
    list <type>
        type:
            templates                list all template and their associated file,.
            colorschemes             list all colorschemes available.
    load <template> <colorscheme>    apply <colorscheme> to the file associated with <template>.
    load-all <colorscheme>           apply <colorscheme> to all the files added to manager.
              """)

match sys.argv[1]:
    case "help":
        print_help()
    case "add":
        if len(sys.argv)-1 == 2:
            add_file(sys.argv[2], None)
        elif len(sys.argv)-1 == 3:
            add_file(sys.argv[2], sys.argv[3])
        else:
            quit("missing arg")
    case "remove":
        if len(sys.argv)-1 < 1:
            quit("missing arg")

        arg = sys.argv[2]
        remove_template(arg)
    case "list":
        if len(sys.argv)-1 < 2:
            quit("missing arg")
        
        typ = sys.argv[2]
        if typ == "templates":
            list_template()
        elif typ == "colorschemes":
            list_colorscheme()
        else:
            quit("option not available")
    case "load":
        if len(sys.argv)-1 < 3:
            quit("missing arg")

        template = sys.argv[2]
        colorscheme = sys.argv[3]
        parse(colorscheme, template)
    case "load-all":
        if len(sys.argv)-1 < 1:
            quit("missing arg")

        colorscheme = sys.argv[2]
        parse_all(colorscheme)
    case _:
        print("invalid option.\n")
        print_help()
        exit(1)
